/*-
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 2025 Jianping Duan <static.integer@hotmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */
#ifndef _TTY_FUNCS_H_
#define _TTY_FUNCS_H_

/*
 * Place terminal referred to by 'fd' in cbreak mode (noncanonical mode with
 * echoing turned off). This function assumes that the terminal is currently in
 * cooked mode (i.e., we shouldn't call it if the terminal is currently in raw
 * mode, since it does not undo all of the changes made by the ttySetRaw()
 * function below). Return 0 on success, or -1 on error. If 'prevTermios' is
 * non-NULL, then use the buffer to which it points to return the previous
 * terminal settings.
 */
static int
tty_setcbreak(int fd, struct termios *prevto)
{
	struct termios tos;

	if (tcgetattr(fd, &tos) == -1) {
		fprintf(stderr, "tcgetatter failed, %s\n", ERR_MSG);
		return -1;
	}

	if (prevto != NULL)
		*prevto = tos;

	tos.c_lflag &= ~(ICANON | ECHO);	/* disable noncanonical and
						display input */
	tos.c_lflag |= ISIG;	/* enable characters generated by signals */

	tos.c_iflag &= ~ICRNL;	/* disable CR mapping NL */

	tos.c_cc[VMIN] = 1;	/* Character-at-a-time input */
	tos.c_cc[VTIME] = 0;	/* with blocking */

	if (tcsetattr(fd, TCSAFLUSH, &tos) == -1) {
		fprintf(stderr, "tcsetatter failed, %s\n", ERR_MSG);
		return -1;
	}

	return 0;
}

/*
 * Place terminal referred to by 'fd' in raw mode (noncanonical mode with all
 * input and output processing disabled). Return 0 on success, or -1 on error.
 * If 'prevTermios' is non-NULL, then use the buffer to which it points to
 * return the previous terminal settings.
 */
static int
tty_setraw(int fd, struct termios *prevto)
{
	struct termios tos;

	if (tcgetattr(fd, &tos) == -1) {
		fprintf(stderr, "tcgetatter failed, %s\n", ERR_MSG);
		return -1;
	}

	if (prevto != NULL)
		*prevto = tos;

	/* 
	 * Noncanonical mode, disable signals, extended input processing, and
	 * echoing.
	 */
	tos.c_lflag &= ~(ICANON | ISIG | IEXTEN | ECHO);

	/*
	 * Disable special handling of CR, NL, and BREAK. No 8th-bit stripping
	 * or parity error handling. Disable START/STOP output flow control.
	 */
	tos.c_iflag &= ~(BRKINT | ICRNL | IGNBRK | IGNCR | INLCR | INPCK |
		ISTRIP | IXON | PARMRK);

	tos.c_oflag &= ~OPOST;	/* Disable all output processing */

	tos.c_cc[VMIN] = 1;	/* Character-at-a-time input */
	tos.c_cc[VTIME] = 0;	/* with blocking */


	if (tcsetattr(fd, TCSAFLUSH, &tos) == -1) {
		fprintf(stderr, "tcsetatter failed, %s\n", ERR_MSG);
		return -1;
	}

	return 0;
}

#endif	/* !_TTY_FUNCS_H_ */
